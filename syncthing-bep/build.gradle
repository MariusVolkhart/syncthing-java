apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'com.google.protobuf'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':syncthing-core')
    compile project(':syncthing-relay-client')
    compile "net.jpountz.lz4:lz4:1.3.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0'
    implementation "org.apache.logging.log4j:log4j-api:$log4JVersion"
    api "com.google.protobuf:protobuf-lite:$protobuf_lite_version"

    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_version"
    testImplementation "com.google.truth.extensions:truth-java8-extension:1.0"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.11.1"
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite { }
            }
        }
    }
}

// Workaround for https://github.com/google/protobuf-gradle-plugin/issues/100
compileKotlin.dependsOn('generateProto')
sourceSets.main.kotlin.srcDirs += file("${protobuf.generatedFilesBaseDir}/main/javalite")

tasks.withType(Test.class) { useJUnitPlatform() }

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}